if (abstract) {
write(paste0("abstract = \"", x[["abstract"]],"\""), fileConn, append = T)
} else {
write("abstract = \"\"", fileConn, append = T)
}
write(paste0("abstract_short = \"","\""), fileConn, append = T)
# other possible fields are kept empty. They can be customized later by
# editing the created md
write("image_preview = \"\"", fileConn, append = T)
write("selected = false", fileConn, append = T)
write("projects = []", fileConn, append = T)
write("tags = []", fileConn, append = T)
#links
write("url_pdf = \"\"", fileConn, append = T)
write("url_preprint = \"\"", fileConn, append = T)
write("url_code = \"\"", fileConn, append = T)
write("url_dataset = \"\"", fileConn, append = T)
write("url_project = \"\"", fileConn, append = T)
write("url_slides = \"\"", fileConn, append = T)
write("url_video = \"\"", fileConn, append = T)
write("url_poster = \"\"", fileConn, append = T)
write("url_source = \"\"", fileConn, append = T)
#other stuff
write("math = true", fileConn, append = T)
write("highlight = true", fileConn, append = T)
# Featured image
write("[header]", fileConn, append = T)
write("image = \"\"", fileConn, append = T)
write("caption = \"\"", fileConn, append = T)
write("+++", fileConn, append = T)
}
}
# apply the "create_md" function over the publications list to generate
# the different "md" files.
apply(mypubs, FUN = function(x) create_md(x), MARGIN = 1)
}
my_bibfile <- here("./R/publications/My Publications.bib")
out_fold   <- here("./content/publication")
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
library(dplyr)
library(stringr)
library(anytime)
library(RefManageR)
library(here)
library(dplyr)
library(stringr)
library(anytime)
library(RefManageR)
library(here)
bibtex_2academic <- function(bibfile,
outfold,
abstract = FALSE,
overwrite = FALSE) {
require(RefManageR)
require(dplyr)
require(stringr)
require(anytime)
# Import the bibtex file and convert to data.frame
mypubs   <- ReadBib(my_bibfile, check = "warn", .Encoding = "UTF-8") %>%
as.data.frame()
mypubs$title <- str_remove_all(mypubs$title, "[{}]")
mypubs$title <- str_replace_all(mypubs$title, pattern = '"', replacement = "'")
mypubs$shorttitle <- str_remove_all(mypubs$shorttitle, "[{}]")
mypubs$author <- str_remove_all(mypubs$author, "[{}]")
mypubs$journal <- str_remove_all(mypubs$journal, "\\\\")
mypubs$journal <- str_replace_all(mypubs$journal, pattern = "&", replacement = "and")
# assign "categories" to the different types of publications
mypubs   <- mypubs %>%
dplyr::mutate(
pubtype = dplyr::case_when(bibtype == "Article" ~ "2",
bibtype == "Article in Press" ~ "2",
bibtype == "InProceedings" ~ "1",
bibtype == "Proceedings" ~ "1",
bibtype == "Conference" ~ "1",
bibtype == "Conference Paper" ~ "1",
bibtype == "MastersThesis" ~ "3",
bibtype == "PhdThesis" ~ "3",
bibtype == "Manual" ~ "4",
bibtype == "TechReport" ~ "4",
bibtype == "Book" ~ "5",
bibtype == "InCollection" ~ "6",
bibtype == "InBook" ~ "6",
bibtype == "Misc" ~ "0",
TRUE ~ "0"))
# create a function which populates the md template based on the info
# about a publication
create_md <- function(x) {
# define a date and create filename by appending date and start of title
if (!is.na(x[["year"]])) {
x[["date"]] <- paste0(x[["year"]], "-01-01")
} else {
x[["date"]] <- "2999-01-01"
}
filename <- paste(x[["date"]], x[["title"]] %>%
str_replace_all(fixed(" "), "_") %>%
str_remove_all(fixed(":")) %>%
str_sub(1, 20) %>%
paste0(".md"), sep = "_")
# start writing
if (!file.exists(file.path(outfold, filename)) | overwrite) {
fileConn <- file.path(outfold, filename)
write("+++", fileConn)
# Title and date
write(paste0("title = \"", x[["title"]], "\""), fileConn, append = T)
write(paste0("date = \"", anydate(x[["date"]]), "\""), fileConn, append = T)
# Authors. Comma separated list, e.g. `["Bob Smith", "David Jones"]`.
auth_hugo <- str_replace_all(x["author"], " and ", "\", \"")
auth_hugo <- stringi::stri_trans_general(auth_hugo, "latin-ascii")
write(paste0("authors = [\"", auth_hugo,"\"]"), fileConn, append = T)
# Publication type. Legend:
# 0 = Uncategorized, 1 = Conference paper, 2 = Journal article
# 3 = Manuscript, 4 = Report, 5 = Book,  6 = Book section
write(paste0("publication_types = [\"", x[["pubtype"]],"\"]"),
fileConn, append = T)
# Publication details: journal, volume, issue, page numbers and doi link
publication <- x[["journal"]]
if (!is.na(x[["volume"]])) publication <- paste0(publication,
", (", x[["volume"]], ")")
if (!is.na(x[["number"]])) publication <- paste0(publication,
", ", x[["number"]])
if (!is.na(x[["pages"]])) publication <- paste0(publication,
", _pp. ", x[["pages"]], "_")
if (!is.na(x[["doi"]])) publication <- paste0(publication,
", ", paste0("https://doi.org/",
x[["doi"]]))
write(paste0("publication = \"", publication,"\""), fileConn, append = T)
write(paste0("publication_short = \"", publication,"\""),fileConn, append = T)
# Abstract and optional shortened version.
if (abstract) {
write(paste0("abstract = \"", x[["abstract"]],"\""), fileConn, append = T)
} else {
write("abstract = \"\"", fileConn, append = T)
}
write(paste0("abstract_short = \"","\""), fileConn, append = T)
# other possible fields are kept empty. They can be customized later by
# editing the created md
write("image_preview = \"\"", fileConn, append = T)
write("selected = false", fileConn, append = T)
write("projects = []", fileConn, append = T)
write("tags = []", fileConn, append = T)
#links
write("url_pdf = \"\"", fileConn, append = T)
write("url_preprint = \"\"", fileConn, append = T)
write("url_code = \"\"", fileConn, append = T)
write("url_dataset = \"\"", fileConn, append = T)
write("url_project = \"\"", fileConn, append = T)
write("url_slides = \"\"", fileConn, append = T)
write("url_video = \"\"", fileConn, append = T)
write("url_poster = \"\"", fileConn, append = T)
write("url_source = \"\"", fileConn, append = T)
#other stuff
write("math = true", fileConn, append = T)
write("highlight = true", fileConn, append = T)
# Featured image
write("[header]", fileConn, append = T)
write("image = \"\"", fileConn, append = T)
write("caption = \"\"", fileConn, append = T)
write("+++", fileConn, append = T)
}
}
# apply the "create_md" function over the publications list to generate
# the different "md" files.
apply(mypubs, FUN = function(x) create_md(x), MARGIN = 1)
}
my_bibfile <- here("./R/publications/My Publications.bib")
out_fold   <- here("./content/publication")
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
library(dplyr)
library(stringr)
library(anytime)
library(RefManageR)
library(here)
bibtex_2academic <- function(bibfile,
outfold,
abstract = FALSE,
overwrite = FALSE) {
require(RefManageR)
require(dplyr)
require(stringr)
require(anytime)
# Import the bibtex file and convert to data.frame
mypubs   <- ReadBib(my_bibfile, check = "warn", .Encoding = "UTF-8") %>%
as.data.frame()
mypubs$title <- str_remove_all(mypubs$title, "[{}]")
mypubs$title <- str_replace_all(mypubs$title, pattern = '"', replacement = "'")
mypubs$shorttitle <- str_remove_all(mypubs$shorttitle, "[{}]")
mypubs$author <- str_remove_all(mypubs$author, "[{}]")
mypubs$journal <- str_remove_all(mypubs$journal, "\\\\")
mypubs$journal <- str_replace_all(mypubs$journal, pattern = "&", replacement = "and")
# assign "categories" to the different types of publications
mypubs   <- mypubs %>%
dplyr::mutate(
pubtype = dplyr::case_when(bibtype == "Article" ~ "2",
bibtype == "Article in Press" ~ "2",
bibtype == "InProceedings" ~ "1",
bibtype == "Proceedings" ~ "1",
bibtype == "Conference" ~ "1",
bibtype == "Conference Paper" ~ "1",
bibtype == "MastersThesis" ~ "3",
bibtype == "PhdThesis" ~ "3",
bibtype == "Manual" ~ "4",
bibtype == "TechReport" ~ "4",
bibtype == "Book" ~ "5",
bibtype == "InCollection" ~ "6",
bibtype == "InBook" ~ "6",
bibtype == "Misc" ~ "0",
TRUE ~ "0"))
# create a function which populates the md template based on the info
# about a publication
create_md <- function(x) {
# define a date and create filename by appending date and start of title
if (!is.na(x[["year"]])) {
x[["date"]] <- paste0(x[["year"]], "-01-01")
} else {
x[["date"]] <- "2999-01-01"
}
filename <- paste(x[["date"]], x[["title"]] %>%
str_replace_all(fixed(" "), "_") %>%
str_remove_all(fixed(":")) %>%
str_sub(1, 20) %>%
paste0(".md"), sep = "_")
# start writing
if (!file.exists(file.path(outfold, filename)) | overwrite) {
fileConn <- file.path(outfold, filename)
write("+++", fileConn)
# Title and date
write(paste0("title = \"", x[["title"]], "\""), fileConn, append = T)
write(paste0("date = \"", anydate(x[["date"]]), "\""), fileConn, append = T)
# Authors. Comma separated list, e.g. `["Bob Smith", "David Jones"]`.
auth_hugo <- str_replace_all(x["author"], " and ", "\", \"")
auth_hugo <- stringi::stri_trans_general(auth_hugo, "latin-ascii")
write(paste0("authors = [\"", auth_hugo,"\"]"), fileConn, append = T)
# Publication type. Legend:
# 0 = Uncategorized, 1 = Conference paper, 2 = Journal article
# 3 = Manuscript, 4 = Report, 5 = Book,  6 = Book section
write(paste0("publication_types = [\"", x[["pubtype"]],"\"]"),
fileConn, append = T)
# Publication details: journal, volume, issue, page numbers and doi link
publication <- x[["journal"]]
if (!is.na(x[["volume"]])) publication <- paste0(publication,
", (", x[["volume"]], ")")
if (!is.na(x[["number"]])) publication <- paste0(publication,
", ", x[["number"]])
if (!is.na(x[["pages"]])) publication <- paste0(publication,
", _pp. ", x[["pages"]], "_")
if (!is.na(x[["doi"]])) publication <- paste0(publication,
", ", paste0("https://doi.org/",
x[["doi"]]))
write(paste0("publication = \"", publication,"\""), fileConn, append = T)
write(paste0("publication_short = \"", publication,"\""),fileConn, append = T)
# Abstract and optional shortened version.
if (abstract) {
write(paste0("abstract = \"", x[["abstract"]],"\""), fileConn, append = T)
} else {
write("abstract = \"\"", fileConn, append = T)
}
write(paste0("abstract_short = \"","\""), fileConn, append = T)
# other possible fields are kept empty. They can be customized later by
# editing the created md
write("image_preview = \"\"", fileConn, append = T)
write("selected = false", fileConn, append = T)
write("projects = []", fileConn, append = T)
write("tags = []", fileConn, append = T)
#links
write("url_pdf = \"\"", fileConn, append = T)
write("url_preprint = \"\"", fileConn, append = T)
write("url_code = \"\"", fileConn, append = T)
write("url_dataset = \"\"", fileConn, append = T)
write("url_project = \"\"", fileConn, append = T)
write("url_slides = \"\"", fileConn, append = T)
write("url_video = \"\"", fileConn, append = T)
write("url_poster = \"\"", fileConn, append = T)
write("url_source = \"\"", fileConn, append = T)
#other stuff
write("math = true", fileConn, append = T)
write("highlight = true", fileConn, append = T)
# Featured image
write("[header]", fileConn, append = T)
write("image = \"\"", fileConn, append = T)
write("caption = \"\"", fileConn, append = T)
write("+++", fileConn, append = T)
}
}
# apply the "create_md" function over the publications list to generate
# the different "md" files.
apply(mypubs, FUN = function(x) create_md(x), MARGIN = 1)
}
my_bibfile <- here("./R/publications/My Publications.bib")
out_fold   <- here("./content/publication")
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site(build_rmd = TRUE)
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown:::preview_site()
blogdown::build_site()
blogdown:::preview_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::preview_site()
blogdown::new_post(title = "Basic Probability")
blogdown::new_post(title = "Basic Probability", ext = 'Rmd')
blogdown::new_post(title = "Basic Probability", ext = "Rmd")
blogdown::new_post(title = "Basic Probability", file = "index.en.Rmd")
blogdown::new_post(title = "Basic Probability", file = "Rmd")
blogdown::new_post(title = "Basic Probability", ext = '.Rmd')
blogdown::build_site(build_rmd = TRUE)
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
load("~/R/SportScienceBlog/public/post/force-velocity/data.RData")
View(data)
blogdown:::preview_site()
blogdown::serve_site()
# We first define the data range and sequence of start dates
start_dates <- seq(dmy("05-01-2024"), dmy("10-01-2024") - 1, by = "days")
library(lubridate)
# We first define the data range and sequence of start dates
start_dates <- seq(dmy("05-01-2024"), dmy("10-01-2024") - 1, by = "days")
end_dates <- start_dates + 1  # One day after each start date
end_dates <- start_dates + 2  # One day after each start date
# We first define the data range and sequence of start dates
start_dates <- seq(dmy("05-01-2024"), dmy("10-01-2024") - 2, by = "days")
end_dates <- start_dates + 2  # One day after each start date
# We first define the data range and sequence of start dates
start_dates <- seq(dmy("05-01-2024"), dmy("10-01-2024") - 2, by = 2)
# We first define the data range and sequence of start dates
start_dates <- seq(dmy("05-01-2024"), dmy("10-01-2024") - 1, by = "days")
end_dates <- start_dates + 1  # One day after each start date
library(catapultR)
library(tidyverse)
library(lubridate)
#Set player name, and date range for the data of interest
playerName <- name
knitr::opts_chunk$set(echo = TRUE)
data_6 <- TidyCatapult::get_raw_data(name = "Mads Kristian Hansen",
startdate = "06-04-2024",
enddate = "07-04-2024",
stoken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI0NjFiMTExMS02ZjdhLTRkYmItOWQyOS0yMzAzOWZlMjI4OGUiLCJqdGkiOiIyNzQ1NzNiYjI4NzI5Mzk5YmM0MDQzOWVjYmUxN2YyZDczZWQwMzY0NzFjMjc3Mzg1MDgwYTBiZDk1ZmI1ODkyZTUwNWQ4ZWY3NTY5ZGY4MCIsImlhdCI6MTY1MTAzOTQ5OSwibmJmIjoxNjUxMDM5NDk5LCJleHAiOjQ4MDQ2NDMwOTksInN1YiI6IjY0NGYwMDMxLTI5ZmUtNDdkMC1hZmNjLTAyN2NjNmEzY2NjMyIsInNjb3BlcyI6WyJjb25uZWN0Iiwic2Vuc29yLXJlYWQtb25seSJdfQ.RyJTpYAFEC40OUhBexNqMD8t0En2FQ4H6WUKGo7k8u2agXi9D8Vaj2DITIbfRxvm4a9PHL0cdVHQ_AvbWG_xeIM55FphbaIyZxsQ2rbBJ10soBmnUmX7o7KHjMJd4mbd9fLbznibcd_CCdMzRMIXQ90_kQT4YZQEiV8kcmdun7UTlUgtKhdlKpK8GkLEdxiBzberuB7QIjD5rhxIDxqq95ONjN7cLKEmrRhGUJJBuLo4jxvJ3ZKaEPbE9cDb4CkHhMEEDbKjCkTjWDuNlqrz63SWLkQtX4ClSM-ITa95my2kFDL_PLk3R4F1YjnFdjIO_ie4ymB8GeMAjkPnn_ca1u-VxfD9dNVqIISXWGv4H4af_97qPKG0SbAk9NPOuYYkLRZGThWOyuvUlUzNMood7HkbcvuHUV6XGEeMDayyI4SmxzHCTuLQN5yQbDyUXnY8M18GFXL4LFyu5Ck7RiBLzLEDS3vsUokzJNxuNdV4zXcOq_IhK-jF8zAs1XqmznSKVKiqG8UTWRpTad6TmQ7RHszOjy0twYKN_0cDp5Zpbq_aQC676rnlqiCYxH_apebQ71Rl2x3zZc9Co0fRY8U8Bbq_y499rRucGHdnh0pFof8bTCv0DYzmqldPYrvD_NeOafDMRsOdqz1HoHkflofiPaIx3aJnxzdbmFK__qv5xII", sregion = "EMEA")
View(data_6)
data_5 <- TidyCatapult::get_raw_data(name = "Mads Kristian Hansen",
startdate = "05-04-2024",
enddate = "06-04-2024",
stoken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI0NjFiMTExMS02ZjdhLTRkYmItOWQyOS0yMzAzOWZlMjI4OGUiLCJqdGkiOiIyNzQ1NzNiYjI4NzI5Mzk5YmM0MDQzOWVjYmUxN2YyZDczZWQwMzY0NzFjMjc3Mzg1MDgwYTBiZDk1ZmI1ODkyZTUwNWQ4ZWY3NTY5ZGY4MCIsImlhdCI6MTY1MTAzOTQ5OSwibmJmIjoxNjUxMDM5NDk5LCJleHAiOjQ4MDQ2NDMwOTksInN1YiI6IjY0NGYwMDMxLTI5ZmUtNDdkMC1hZmNjLTAyN2NjNmEzY2NjMyIsInNjb3BlcyI6WyJjb25uZWN0Iiwic2Vuc29yLXJlYWQtb25seSJdfQ.RyJTpYAFEC40OUhBexNqMD8t0En2FQ4H6WUKGo7k8u2agXi9D8Vaj2DITIbfRxvm4a9PHL0cdVHQ_AvbWG_xeIM55FphbaIyZxsQ2rbBJ10soBmnUmX7o7KHjMJd4mbd9fLbznibcd_CCdMzRMIXQ90_kQT4YZQEiV8kcmdun7UTlUgtKhdlKpK8GkLEdxiBzberuB7QIjD5rhxIDxqq95ONjN7cLKEmrRhGUJJBuLo4jxvJ3ZKaEPbE9cDb4CkHhMEEDbKjCkTjWDuNlqrz63SWLkQtX4ClSM-ITa95my2kFDL_PLk3R4F1YjnFdjIO_ie4ymB8GeMAjkPnn_ca1u-VxfD9dNVqIISXWGv4H4af_97qPKG0SbAk9NPOuYYkLRZGThWOyuvUlUzNMood7HkbcvuHUV6XGEeMDayyI4SmxzHCTuLQN5yQbDyUXnY8M18GFXL4LFyu5Ck7RiBLzLEDS3vsUokzJNxuNdV4zXcOq_IhK-jF8zAs1XqmznSKVKiqG8UTWRpTad6TmQ7RHszOjy0twYKN_0cDp5Zpbq_aQC676rnlqiCYxH_apebQ71Rl2x3zZc9Co0fRY8U8Bbq_y499rRucGHdnh0pFof8bTCv0DYzmqldPYrvD_NeOafDMRsOdqz1HoHkflofiPaIx3aJnxzdbmFK__qv5xII", sregion = "EMEA")
View(data_5)
View(data_6)
View(data_5)
View(data_6)
View(data_5)
View(data_5[[1]])
View(data_6)
View(data_6[[1]])
# I first define the date range and sequence of start dates - I use the seq function to create consecutive days within the range, and minus by 1, since the end date will by the start date + 1
start_dates <- seq(dmy("06-04-2024"), dmy("16-04-2024") - 1, by = "days")
end_dates <- start_dates + 1
data <- map2(start_dates, end_dates, ~TidyCatapult::get_raw_data(name = "Mads Kristian Hansen",
startdate = format(.x, "%d-%m-%Y"),
enddate = format(.y, "%d-%m-%Y"),
stoken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI0NjFiMTExMS02ZjdhLTRkYmItOWQyOS0yMzAzOWZlMjI4OGUiLCJqdGkiOiIyNzQ1NzNiYjI4NzI5Mzk5YmM0MDQzOWVjYmUxN2YyZDczZWQwMzY0NzFjMjc3Mzg1MDgwYTBiZDk1ZmI1ODkyZTUwNWQ4ZWY3NTY5ZGY4MCIsImlhdCI6MTY1MTAzOTQ5OSwibmJmIjoxNjUxMDM5NDk5LCJleHAiOjQ4MDQ2NDMwOTksInN1YiI6IjY0NGYwMDMxLTI5ZmUtNDdkMC1hZmNjLTAyN2NjNmEzY2NjMyIsInNjb3BlcyI6WyJjb25uZWN0Iiwic2Vuc29yLXJlYWQtb25seSJdfQ.RyJTpYAFEC40OUhBexNqMD8t0En2FQ4H6WUKGo7k8u2agXi9D8Vaj2DITIbfRxvm4a9PHL0cdVHQ_AvbWG_xeIM55FphbaIyZxsQ2rbBJ10soBmnUmX7o7KHjMJd4mbd9fLbznibcd_CCdMzRMIXQ90_kQT4YZQEiV8kcmdun7UTlUgtKhdlKpK8GkLEdxiBzberuB7QIjD5rhxIDxqq95ONjN7cLKEmrRhGUJJBuLo4jxvJ3ZKaEPbE9cDb4CkHhMEEDbKjCkTjWDuNlqrz63SWLkQtX4ClSM-ITa95my2kFDL_PLk3R4F1YjnFdjIO_ie4ymB8GeMAjkPnn_ca1u-VxfD9dNVqIISXWGv4H4af_97qPKG0SbAk9NPOuYYkLRZGThWOyuvUlUzNMood7HkbcvuHUV6XGEeMDayyI4SmxzHCTuLQN5yQbDyUXnY8M18GFXL4LFyu5Ck7RiBLzLEDS3vsUokzJNxuNdV4zXcOq_IhK-jF8zAs1XqmznSKVKiqG8UTWRpTad6TmQ7RHszOjy0twYKN_0cDp5Zpbq_aQC676rnlqiCYxH_apebQ71Rl2x3zZc9Co0fRY8U8Bbq_y499rRucGHdnh0pFof8bTCv0DYzmqldPYrvD_NeOafDMRsOdqz1HoHkflofiPaIx3aJnxzdbmFK__qv5xII", sregion = "EMEA"))
View(data)
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown:::preview_site()
blogdown::build_site()
library(dplyr)
library(stringr)
library(anytime)
library(RefManageR)
library(here)
bibtex_2academic <- function(bibfile,
outfold,
abstract = FALSE,
overwrite = FALSE) {
require(RefManageR)
require(dplyr)
require(stringr)
require(anytime)
# Import the bibtex file and convert to data.frame
mypubs   <- ReadBib(my_bibfile, check = "warn", .Encoding = "UTF-8") %>%
as.data.frame()
mypubs$title <- str_remove_all(mypubs$title, "[{}]")
mypubs$title <- str_replace_all(mypubs$title, pattern = '"', replacement = "'")
mypubs$shorttitle <- str_remove_all(mypubs$shorttitle, "[{}]")
mypubs$author <- str_remove_all(mypubs$author, "[{}]")
mypubs$journal <- str_remove_all(mypubs$journal, "\\\\")
mypubs$journal <- str_replace_all(mypubs$journal, pattern = "&", replacement = "and")
# assign "categories" to the different types of publications
mypubs   <- mypubs %>%
dplyr::mutate(
pubtype = dplyr::case_when(bibtype == "Article" ~ "2",
bibtype == "Article in Press" ~ "2",
bibtype == "InProceedings" ~ "1",
bibtype == "Proceedings" ~ "1",
bibtype == "Conference" ~ "1",
bibtype == "Conference Paper" ~ "1",
bibtype == "MastersThesis" ~ "3",
bibtype == "PhdThesis" ~ "3",
bibtype == "Manual" ~ "4",
bibtype == "TechReport" ~ "4",
bibtype == "Book" ~ "5",
bibtype == "InCollection" ~ "6",
bibtype == "InBook" ~ "6",
bibtype == "Misc" ~ "0",
TRUE ~ "0"))
# create a function which populates the md template based on the info
# about a publication
create_md <- function(x) {
# define a date and create filename by appending date and start of title
if (!is.na(x[["year"]])) {
x[["date"]] <- paste0(x[["year"]], "-01-01")
} else {
x[["date"]] <- "2999-01-01"
}
filename <- paste(x[["date"]], x[["title"]] %>%
str_replace_all(fixed(" "), "_") %>%
str_remove_all(fixed(":")) %>%
str_sub(1, 20) %>%
paste0(".md"), sep = "_")
# start writing
if (!file.exists(file.path(outfold, filename)) | overwrite) {
fileConn <- file.path(outfold, filename)
write("+++", fileConn)
# Title and date
write(paste0("title = \"", x[["title"]], "\""), fileConn, append = T)
write(paste0("date = \"", anydate(x[["date"]]), "\""), fileConn, append = T)
# Authors. Comma separated list, e.g. `["Bob Smith", "David Jones"]`.
auth_hugo <- str_replace_all(x["author"], " and ", "\", \"")
auth_hugo <- stringi::stri_trans_general(auth_hugo, "latin-ascii")
write(paste0("authors = [\"", auth_hugo,"\"]"), fileConn, append = T)
# Publication type. Legend:
# 0 = Uncategorized, 1 = Conference paper, 2 = Journal article
# 3 = Manuscript, 4 = Report, 5 = Book,  6 = Book section
write(paste0("publication_types = [\"", x[["pubtype"]],"\"]"),
fileConn, append = T)
# Publication details: journal, volume, issue, page numbers and doi link
publication <- x[["journal"]]
if (!is.na(x[["volume"]])) publication <- paste0(publication,
", (", x[["volume"]], ")")
if (!is.na(x[["number"]])) publication <- paste0(publication,
", ", x[["number"]])
if (!is.na(x[["pages"]])) publication <- paste0(publication,
", _pp. ", x[["pages"]], "_")
if (!is.na(x[["doi"]])) publication <- paste0(publication,
", ", paste0("https://doi.org/",
x[["doi"]]))
write(paste0("publication = \"", publication,"\""), fileConn, append = T)
write(paste0("publication_short = \"", publication,"\""),fileConn, append = T)
# Abstract and optional shortened version.
if (abstract) {
write(paste0("abstract = \"", x[["abstract"]],"\""), fileConn, append = T)
} else {
write("abstract = \"\"", fileConn, append = T)
}
write(paste0("abstract_short = \"","\""), fileConn, append = T)
# other possible fields are kept empty. They can be customized later by
# editing the created md
write("image_preview = \"\"", fileConn, append = T)
write("selected = false", fileConn, append = T)
write("projects = []", fileConn, append = T)
write("tags = []", fileConn, append = T)
#links
write("url_pdf = \"\"", fileConn, append = T)
write("url_preprint = \"\"", fileConn, append = T)
write("url_code = \"\"", fileConn, append = T)
write("url_dataset = \"\"", fileConn, append = T)
write("url_project = \"\"", fileConn, append = T)
write("url_slides = \"\"", fileConn, append = T)
write("url_video = \"\"", fileConn, append = T)
write("url_poster = \"\"", fileConn, append = T)
write("url_source = \"\"", fileConn, append = T)
#other stuff
write("math = true", fileConn, append = T)
write("highlight = true", fileConn, append = T)
# Featured image
write("[header]", fileConn, append = T)
write("image = \"\"", fileConn, append = T)
write("caption = \"\"", fileConn, append = T)
write("+++", fileConn, append = T)
}
}
# apply the "create_md" function over the publications list to generate
# the different "md" files.
apply(mypubs, FUN = function(x) create_md(x), MARGIN = 1)
}
my_bibfile <- here("./R/publications/My Publications.bib")
out_fold   <- here("./content/publication")
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
