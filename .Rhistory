#change x to second
names(df_data_combined_second) <- gsub("x", "second_", names(df_data_combined_second))
#bind columns from the two data frames back to single dataframe
df_data_combined <- bind_cols(df_data_combined_first, df_data_combined_second)
df_data_combined_head <- head(df_data_combined, 10)
kableExtra::kable(df_data_combined_head) %>%
kable_classic_2()
#use the pivot longer to change from wide to long format based on all numeric columns (all columns containing split values)
df_data_long <- df_data_combined %>%
pivot_longer(cols = where(is.numeric), names_to = "split", values_to = "value")
#separate the row names with split labels (eg. first_5) into two columns with "half" (first and second, respectively) and "splits" (eg. 5, 10, 10 etc.)
df_data_long <- df_data_long %>%
separate(col = split, into = c("half", "splits"), sep = "_") %>%
mutate(match = match,
date = date)
#change the data column from character string to date format
df_data_long$date <- as.Date(df_data_long$date)
library(readr)
library(kableExtra)
library(tidyverse)
library(janitor)
data_sample <- read_csv("C:/Users/lasse/OneDrive/Skrivebord/SecondSpectrumSample.csv")
data_sample_head <- head(data_sample, 50)
kableExtra::kable(data_sample_head) %>%
kableExtra::kable_classic_2()
#extract the value in the first column and row in a new data frame
Match_data <- data_sample[1,1]
#Since the Match_data now contains both Team and date in a single column, I separate the column into two columns
Match_data <- Match_data %>%
separate(col = "Second Spectrum Split Data", into = c("match", "date"), sep = " : ")
#and subsequently store each value
match <- Match_data$match
date <- Match_data$date
#then delete the inital 12 rows of the data frame
data_skip <- data_sample %>%
slice(13:max(nrow(data_sample)))
head_data_skip <- head(data_skip, 10)
kable(head_data_skip) %>%
kable_classic_2()
#Using the which function to identify row numbers for Minute Spilts, which mark the separation of the two teams
splits <- which(data_skip$`Second Spectrum Split Data` == "Minute Splits")
#Using the row numbers to slice the data frame and two splits, one for each team
data_split_1 <- data_skip %>%
slice(splits[1]:(splits[2]-1))
data_split_2 <- data_skip %>%
slice(splits[2]:max(nrow(data_skip)))
#Combine in a list
list_split_team <- list(data_split_1, data_split_2)
#I first move the first row up to become column names, remove empty rows/columns, and clean column names since (this is important this there are two splits with 50) using the janitor package. change first row to col names, remove emply rows and/or columns, and create unique colnames, rename, and add row numbers for breaks
list_split_team <- list_split_team %>%
map(function(x){row_to_names(x, 1)}) %>%
map(function(x){remove_empty(x)}) %>%
map(function(x){clean_names(x)}) %>%
#I then rename the first column from minute split, which was the name of the row, to metric, which then contains the different running measures
map(function(x){rename(x, metric = minute_splits)}) %>%
#I create a new column with row number, which I need to cut a data frame in chunks containing a player each
map(function(x){mutate(x, row_number = row_number())}) %>%
#I create a new column with the value from the first column and row (that the the team name)
map(function(x) {mutate(x, "team_sep" = x[[1,1]])}) %>%
#For each team/player the running based metrics are contained in 12 rows, so I use the cut function to mark cuts every 12th rows
map(function(x){mutate(x, cuts = cut(x$row_number, breaks = (max(nrow(x))/12)))}) %>%
#I also mark the initial 12 rows versus the remaining rows and label those "group" and "individual" to mark whether the metrics a based on a team or individual level
map(function(x){mutate(x, level = cut(x$row_number, breaks = c(0,12, max(nrow(x))), labels = c("group", "individual")))})
#I then create a data from each team
data_split_1 <- list_split_team[[1]]
data_split_2 <- list_split_team[[2]]
#split each data frame based on the cuts for each player, so I end up with two lists - one for each team each containing separate data frames for each player
list_team_1 <- data_split_1 %>%
group_split(cuts)
list_team_2 <- data_split_2 %>%
group_split(cuts)
#and finally combine those two lists into a single list
list_team_combined <- append(list_team_1, list_team_2)
kableExtra::kable(list_team_1[[2]]) %>%
kable_classic_2()
#mutate a new variable "id" based on first row/column (identifier name) in each data frame
list_team_combined <- list_team_combined  %>%
map(function(x) {mutate(x, "id" = x[[1,1]])}) %>%
#and omit all na to clean data frames
map(function(x){na.omit(x)})
kableExtra::kable(list_team_combined[[2]]) %>%
kable_classic_2()
#bind lists into dateframe
df_data_combined <- list_team_combined %>%
bind_rows()
#separate team/player name from identifier (the numbers/characters contained in brackets after each player/team name)
df_data_combined  <- df_data_combined  %>%
separate(col = id, into = c("id", NA), sep = "[(]") %>%
separate(col = team_sep, into = c("team", NA), sep = "[(]")
#delete unnecessary columns, columns that are no longer needed (row_number and cuts)
df_data_combined <- df_data_combined %>%
select(-c("row_number", "cuts"))
#First select the the first half data set. This can be achieved by selecting the columns from the "metric" to the "x50_2" subsequently deleting the "x50_2" column as this belongs to the second half. We need to do it this way, since the last column of the first half also contains "x50".
df_data_combined_first <- df_data_combined %>%
select(metric:ends_with("2")) %>%
select(-(ends_with("2")))
#select second half data (from "x50_2" to "id" columns)
df_data_combined_second <- df_data_combined %>%
select(ends_with("2"):id)
#In each of the two data frames we now change "x" to "first_" or "second_", respectively, to label the period in the game. This is not necessary, but give some nice oppurtunity to finter on half once we turn the data into a tidy format
names(df_data_combined_first) <- gsub("x", "first_", names(df_data_combined_first))
#change x to second
names(df_data_combined_second) <- gsub("x", "second_", names(df_data_combined_second))
#bind columns from the two data frames back to single dataframe
df_data_combined <- bind_cols(df_data_combined_first, df_data_combined_second)
df_data_combined_head <- head(df_data_combined, 10)
kableExtra::kable(df_data_combined_head) %>%
kable_classic_2()
#use the pivot longer to change from wide to long format based on all numeric columns (all columns containing split values)
df_data_long <- df_data_combined %>%
pivot_longer(cols = where(is.numeric), names_to = "split", values_to = "value")
#separate the row names with split labels (eg. first_5) into two columns with "half" (first and second, respectively) and "splits" (eg. 5, 10, 10 etc.)
df_data_long <- df_data_long %>%
separate(col = split, into = c("half", "splits"), sep = "_") %>%
mutate(match = match,
date = date)
#change the data column from character string to date format
df_data_long$date <- as.Date(df_data_long$date)
#bind lists into dateframe
df_data_combined <- list_team_combined %>%
bind_rows()
#separate team/player name from identifier (the numbers/characters contained in brackets after each player/team name)
df_data_combined  <- df_data_combined  %>%
separate(col = id, into = c("id", NA), sep = " [(]") %>%
separate(col = team_sep, into = c("team", NA), sep = " [(]")
#delete unnecessary columns, columns that are no longer needed (row_number and cuts)
df_data_combined <- df_data_combined %>%
select(-c("row_number", "cuts"))
#First select the the first half data set. This can be achieved by selecting the columns from the "metric" to the "x50_2" subsequently deleting the "x50_2" column as this belongs to the second half. We need to do it this way, since the last column of the first half also contains "x50".
df_data_combined_first <- df_data_combined %>%
select(metric:ends_with("2")) %>%
select(-(ends_with("2")))
#select second half data (from "x50_2" to "id" columns)
df_data_combined_second <- df_data_combined %>%
select(ends_with("2"):id)
#In each of the two data frames we now change "x" to "first_" or "second_", respectively, to label the period in the game. This is not necessary, but give some nice oppurtunity to finter on half once we turn the data into a tidy format
names(df_data_combined_first) <- gsub("x", "first_", names(df_data_combined_first))
#change x to second
names(df_data_combined_second) <- gsub("x", "second_", names(df_data_combined_second))
#bind columns from the two data frames back to single dataframe
df_data_combined <- bind_cols(df_data_combined_first, df_data_combined_second)
df_data_combined_head <- head(df_data_combined, 10)
kableExtra::kable(df_data_combined_head) %>%
kable_classic_2()
#use the pivot longer to change from wide to long format based on all numeric columns (all columns containing split values)
df_data_long <- df_data_combined %>%
pivot_longer(cols = where(is.numeric), names_to = "split", values_to = "value")
#separate the row names with split labels (eg. first_5) into two columns with "half" (first and second, respectively) and "splits" (eg. 5, 10, 10 etc.)
df_data_long <- df_data_long %>%
separate(col = split, into = c("half", "splits"), sep = "_") %>%
mutate(match = match,
date = date)
#change the data column from character string to date format
df_data_long$date <- as.Date(df_data_long$date)
df_data_long_head <- head(df_data_long, 20)
kableExtra::kable(df_data_long_head) %>%
kable_classic_2()
df_data_long %>%
filter(team == "Team A", level = "individual") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id)) +
geom_point(size = 5) +
geom_line()
df_data_long %>%
filter(team == "Team A", level == "individual") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id)) +
geom_point(size = 5) +
geom_line()
df_data_long %>%
filter(team == "Team A", level == "individual") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, group = metric)) +
geom_point(size = 5) +
geom_line()
df_data_long %>%
filter(team == "Team A", level == "individual") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, group = id)) +
geom_point(size = 5) +
geom_line()
df_data_long %>%
filter(team == "Team A", level == "individual") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, group = id)) +
geom_point(size = 5) +
geom_line() +
facet_wrap(~metric)
df_data_long %>%
filter(team == "Team A", level == "individual") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, group = metric)) +
geom_point(size = 5) +
geom_line() +
facet_wrap(~metric)
df_data_long %>%
filter(team == "Team A", level == "individual") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = metric)) +
geom_point(size = 5) +
geom_line() +
facet_wrap(~metric)
df_data_long %>%
filter(team == "Team A", level == "individual") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line() +
facet_wrap(~metric)
#First select the the first half data set. This can be achieved by selecting the columns from the "metric" to the "x50_2" subsequently deleting the "x50_2" column as this belongs to the second half. We need to do it this way, since the last column of the first half also contains "x50".
df_data_combined_first <- df_data_combined %>%
select(metric:ends_with("2")) %>%
select(-(ends_with("2")))
#select second half data (from "x50_2" to "id" columns)
df_data_combined_second <- df_data_combined %>%
select(ends_with("2"):id)
#In each of the two data frames we now change "x" to "first_" or "second_", respectively, to label the period in the game. This is not necessary, but give some nice oppurtunity to finter on half once we turn the data into a tidy format
names(df_data_combined_first) <- gsub("x", "first_", names(df_data_combined_first))
#change x to second
names(df_data_combined_second) <- gsub("_2", ".2", names(df_data_combined_second))
names(df_data_combined_second) <- gsub("x", "second_", names(df_data_combined_second))
#bind columns from the two data frames back to single dataframe
df_data_combined <- bind_cols(df_data_combined_first, df_data_combined_second)
df_data_combined_head <- head(df_data_combined, 10)
kableExtra::kable(df_data_combined_head) %>%
kable_classic_2()
#use the pivot longer to change from wide to long format based on all numeric columns (all columns containing split values)
df_data_long <- df_data_combined %>%
pivot_longer(cols = where(is.numeric), names_to = "split", values_to = "value")
#separate the row names with split labels (eg. first_5) into two columns with "half" (first and second, respectively) and "splits" (eg. 5, 10, 10 etc.)
df_data_long <- df_data_long %>%
separate(col = split, into = c("half", "splits"), sep = "_") %>%
mutate(match = match,
date = date)
#change the data column from character string to date format
df_data_long$date <- as.Date(df_data_long$date)
df_data_long_head <- head(df_data_long, 20)
kableExtra::kable(df_data_long_head) %>%
kable_classic_2()
df_data_long %>%
filter(team == "Team A", level == "individual") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line() +
facet_wrap(~metric)
#First select the the first half data set. This can be achieved by selecting the columns from the "metric" to the "x50_2" subsequently deleting the "x50_2" column as this belongs to the second half. We need to do it this way, since the last column of the first half also contains "x50".
df_data_combined_first <- df_data_combined %>%
select(metric:ends_with("2")) %>%
select(-(ends_with("2")))
#select second half data (from "x50_2" to "id" columns)
df_data_combined_second <- df_data_combined %>%
select(ends_with("2"):id)
#In each of the two data frames we now change "x" to "first_" or "second_", respectively, to label the period in the game. This is not necessary, but give some nice oppurtunity to finter on half once we turn the data into a tidy format
names(df_data_combined_first) <- gsub("x", "first_", names(df_data_combined_first))
#change x to second
names(df_data_combined_second) <- gsub("_2", "", names(df_data_combined_second))
names(df_data_combined_second) <- gsub("x", "second_", names(df_data_combined_second))
#bind columns from the two data frames back to single dataframe
df_data_combined <- bind_cols(df_data_combined_first, df_data_combined_second)
df_data_combined_head <- head(df_data_combined, 10)
kableExtra::kable(df_data_combined_head) %>%
kable_classic_2()
#use the pivot longer to change from wide to long format based on all numeric columns (all columns containing split values)
df_data_long <- df_data_combined %>%
pivot_longer(cols = where(is.numeric), names_to = "split", values_to = "value")
#separate the row names with split labels (eg. first_5) into two columns with "half" (first and second, respectively) and "splits" (eg. 5, 10, 10 etc.)
df_data_long <- df_data_long %>%
separate(col = split, into = c("half", "splits"), sep = "_") %>%
mutate(match = match,
date = date)
#change the data column from character string to date format
df_data_long$date <- as.Date(df_data_long$date)
df_data_long_head <- head(df_data_long, 20)
kableExtra::kable(df_data_long_head) %>%
kable_classic_2()
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", level == "individual") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line() +
facet_wrap(~metric)
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", level == "individual") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric)
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", level == "individual", id != "Athlete 4") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric)
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", level == "individual", id != "Athlete 4", id != "Athlete 2") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric)
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", level == "individual", id == "Athlete 3") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric)
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", level == "individual", id == "Athlete 3") %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric)
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", level == "individual", id %in% c("Athlete 3", "Athlete 4") %>%
filter(metric %in% c("High Speed Running Distance", "Spcrinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric)
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", level == "individual", id %in% c("Athlete 3", "Athlete 4")) %>%
filter(metric %in% c("High Speed Running Distance", "Spcrinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric)
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", level == "individual", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Spcrinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric)
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Spcrinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric)
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric)
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y")
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y") +
theme_linedraw()
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y") +
theme_void()
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y") +
theme_bw()
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = metric)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y") +
theme_bw() +
ylab("Meters") +
xlab("Minutes Played")
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y") +
theme_bw() +
ylab("Meters") +
xlab("Minutes Played") +
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y") +
theme_bw() +
ylab("Meters") +
xlab("Minutes Played")
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = id)) +
geom_point(size = 5) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y") +
theme_bw() +
ylab("Meters") +
xlab("Minutes Played")
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = id)) +
geom_point(size = 3) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y") +
theme_bw() +
ylab("Meters") +
xlab("Minutes Played")
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id, shape = id)) +
geom_point(size = 3) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y") +
theme_bw() +
ylab("Meters") +
xlab("Minutes Played") +
ggtitle("High Speed Running Across a Match") +
labs(color = "Athlete name")
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id)) +
geom_point(size = 3) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y") +
theme_bw() +
ylab("Meters") +
xlab("Minutes Played") +
ggtitle("High Speed Running Across a Match") +
labs(color = "Athlete name")
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id)) +
geom_point(size = 3) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y") +
theme_bw() +
ylab("Meters") +
xlab("Minutes Played") +
ggtitle("High Speed Running Across a Match") +
labs(color = "Athlete name")
blogdown::serve_site()
df_data_long %>%
group_by(half) %>%
filter(team == "Team A", id %in% c("Athlete 3", "Athlete 1")) %>%
filter(metric %in% c("High Speed Running Distance", "Sprinting Distance")) %>%
ggplot2::ggplot(aes(x = splits, y = value, color = id)) +
geom_point(size = 3) +
geom_line(aes(group = id)) +
facet_wrap(~metric, ncol = 1, scales = "free_y") +
theme_bw() +
ylab("Meters") +
xlab("Minutes Played") +
ggtitle("High Speed Running Across a Match") +
labs(color = "Athlete name")
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
